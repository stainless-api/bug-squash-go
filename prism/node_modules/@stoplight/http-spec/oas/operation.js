"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformOasOperation = exports.transformOasOperations = void 0;
const json_1 = require("@stoplight/json");
const pickBy = require("lodash.pickby");
const guards_1 = require("../guards");
const utils_1 = require("../utils");
const accessors_1 = require("./accessors");
const externalDocs_1 = require("./externalDocs");
const tags_1 = require("./tags");
const transformers_1 = require("./transformers");
const DEFAULT_METHODS = ['get', 'post', 'put', 'delete', 'options', 'head', 'patch', 'trace'];
function transformOasOperations(document, transformer, methods = DEFAULT_METHODS, ctx) {
    const paths = (0, json_1.isPlainObject)(document.paths) ? Object.keys(document.paths) : [];
    return paths.flatMap(path => {
        const value = document.paths[path];
        if (!(0, json_1.isPlainObject)(value))
            return [];
        let operations = Object.keys(value);
        if (methods !== null) {
            operations = operations.filter(pathKey => methods.includes(pathKey));
        }
        return operations.map(method => transformer({
            document,
            path,
            method,
            ctx,
        }));
    });
}
exports.transformOasOperations = transformOasOperations;
const transformOasOperation = function (path, method) {
    var _a, _b, _c, _d, _e;
    const pathObj = this.maybeResolveLocalRef((_b = (_a = this.document) === null || _a === void 0 ? void 0 : _a.paths) === null || _b === void 0 ? void 0 : _b[path]);
    if (typeof pathObj !== 'object' || pathObj === null) {
        throw new Error(`Could not find ${['paths', path].join('/')} in the provided spec.`);
    }
    const operation = this.maybeResolveLocalRef(pathObj[method]);
    if (!operation) {
        throw new Error(`Could not find ${['paths', path, method].join('/')} in the provided spec.`);
    }
    const serviceId = (this.ids.service = String((_c = this.document['x-stoplight']) === null || _c === void 0 ? void 0 : _c.id));
    this.ids.path = this.generateId.httpPath({ parentId: serviceId, path });
    let operationId;
    if (this.context === 'callback') {
        operationId = this.ids.operation =
            (_d = (0, utils_1.extractId)(operation)) !== null && _d !== void 0 ? _d : this.generateId.httpCallbackOperation({
                parentId: serviceId,
                method,
                path,
            });
    }
    else {
        operationId = this.ids.operation =
            (_e = (0, utils_1.extractId)(operation)) !== null && _e !== void 0 ? _e : this.generateId.httpOperation({ parentId: serviceId, method, path });
    }
    this.parentId = operationId;
    this.context = 'operation';
    return {
        id: operationId,
        method,
        path,
        tags: tags_1.translateToTags.call(this, operation.tags),
        extensions: (0, accessors_1.getExtensions)(operation),
        ...pickBy({
            deprecated: operation.deprecated,
            internal: operation['x-internal'],
        }, guards_1.isBoolean),
        ...pickBy({
            iid: operation.operationId,
            description: operation.description,
            summary: operation.summary,
        }, guards_1.isString),
        securityDeclarationType: (0, transformers_1.translateToSecurityDeclarationType)(operation),
        ...(0, externalDocs_1.toExternalDocs)(operation.externalDocs),
    };
};
exports.transformOasOperation = transformOasOperation;
//# sourceMappingURL=operation.js.map